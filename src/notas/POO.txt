
	
*******	Programacion Orientada a Objetos *******

Orientada a Objetos -> Observar los problemas en forma de objetos

La orientada a Objetos tiene estos pilares: Encapsulamiento, Abstraccion, Herencia, Polimorfismo.

Paradigma -> Teoria que suministra la base y modelo para resolver problemas.

Paradigma se compone de estos 4 elementos: Clases, Propiedades, Metodos, Objetos.

--- - Objetos - --- 
Los objetos son aquellos que tienen propiedades, y comportamientos, 
pueden ser fisico(se pueden tocar "User - tiene caracteriticas y comportamiento") o 
conceptuales(viven en nuestra mente, "Session").

-- Propiedades: 
Tambien pueden llamarse atributos, seran sustantivos(palabras identifica las cosa que conocemos)
las propiedades puede ser el nombre, tamaño, forma, estado de un elemento de un objeto.
-- Comportamiento: 
Son todas las operaciones, acciones del objeto, suelen ser verbos o sustantivo y verbo.
login(), logout, makeReport().

-- Clase
Las clases me permitirán generar mas objetos. Son los modelos sobre los cuales construiremos objetos.
Abstraccion: Analizar objetos para crear clases. 
la abstraccion permite abstraer la forma del objeto para obtener un molde para despues
crear mas objetos, para despues agregarle las propiedades y comportamiento que quiera.


Cuando ya se tiene una clase un modelo lo suficiente generico que permita obtener mas
objetos lo siguiente es plasmarlo en un diagrama UML, ya que las clases son el molde 
el cual tiene atributos y las operaciones del objeto.

Identidad(colorVerde):Nombre de la clase su identificador, nombre debe ser unico.
Estado(colorVioleta):El estado de la clase cualquier atributo, propiedad, que defina la clase.
Comportamiento(colorAzul):Los comportamiento o acciones de la clase.

----------------------------
Nombre Clase (colorVerde)
----------------------------
Atributo1(colorVioleta)
Atributo2(colorVioleta)
Atributo3(colorVioleta)
AtributoN(colorVioleta)
----------------------------
Operacion 1(colorAzul)
Operacion 2(colorAzul)
Operacion 3(colorAzul)
Operacion N(colorAzul)
----------------------------

Ejemplo de clase:

-------------------
	Person
-------------------
	name
------------------
	walk()
------------------


*** Modularidad ***

Es la posibilidad de subdividir un sistema en varios elementos o componentes para formar 
el sistema por completo.
 
La modularidad viene del diseño modular, el diseño insdustrial arquitectura.

La POO se compone de la modularidad, y este permite: Reutilizar codigo, evitar colapsos,
mantenible(añadiendo o quitando), Legibilidad, Resolucion rapida de problemas.

clase: Modularidad, divide el programa en partes o modulos/clases, separar las clase en archivos.

-- Declarando un objeto:
Doctor  myDoctor;   //Doctor(tipo de objeto o nombre de la clase), myDoctor(Nombre del objeto)

-- Instanciando un objeto:
myDoctor = new Doctor(); //myDoctor(Nombre del objeto, new Doctor()(Creando el objeto.

-- Declarando e Instanciando un objeto:
Doctor  myDoctor = new Doctor();  //Doctor  myDoctor (declarando el objeto), = new Doctor();(instanciando/creando el objeto)

-- Utilizando el objeto (en el main)
Doctor  myDoctor = new Doctor();
myDoctor.name = "Alejandro Lopez";
myDoctor.showName();

Una clase no es un objeto -
-- Metodo Constructor -- 
  //Cuando queremos llamar a los metodos siempre se usa parentesis
 //new Doctor(); //El metodo constructor siempre va despues de la palabra reservada new,
y va a usar el nombre de la clase seguido de parentesis

myDoctor = new Doctor();

 ** Metodo constructor
- Crea nuevas instancias de una clase
- Tiene el mismo nombre que la clase que inicializa.
- Usa la palabra reservada new
Usa cero o mas argumentos contenidos dentro de los parentesis que siguen el nombre. 
No regresa un valor

-- Metodo Static
- Se puede usar en toda la clase
- Esta definido por la palabra reservada static.

Los metodos static pueden ser accesados indicando el nombre de la clase, la notacion
punto y el nombre del metodo. Se invoca en una clase que no tiene instancias de la clase.

public class Calculadora{
public static int suma(int a, int b){
return a+b;
}
calculadora.suma(5,2);

Mienbros static:

	public class Calculadora{
		public static final double PI = 3.1416;
		public static int valor = 0;
	}
	Calculadora.PI;
	Calculadora.valor;


Mienbros static:
import static com.anncode.operaciones.Calculadora.*  // -- importar la clase
import static java.lang.Math.*;

public class Principal{
	public static void main(String[] args){
		System.out.println(suma(3,5));  // Usar el metodo suma de la clase calculadora.
		System.out.println(PI);
	}
}

C11---------Encapsulamiento modificadores de acceso --------------------------

si = permite el acceso de modificar, no= no permite el acceso de modificar

 Modificador |  Clase | Package |  Subclase  | Otros |
 Public		 si        si         si        si
 Protected	 si	   si         si	no
 default	 si	   si  	      no	no
 private	 si	   no	      no	no	//un nivel de acceso al parametro dentro de la clase.
-------------------------------------------------------













































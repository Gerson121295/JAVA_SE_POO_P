
	
*******	Programacion Orientada a Objetos *******

Orientada a Objetos -> Observar los problemas en forma de objetos

La orientada a Objetos tiene estos pilares: Encapsulamiento, Abstraccion, Herencia, Polimorfismo.

Paradigma -> Teoria que suministra la base y modelo para resolver problemas.

Paradigma se compone de estos 4 elementos: Clases, Propiedades, Metodos, Objetos.

--- - Objetos - --- 
Los objetos son aquellos que tienen propiedades, y comportamientos, 
pueden ser fisico(se pueden tocar "User - tiene caracteriticas y comportamiento") o 
conceptuales(viven en nuestra mente, "Session").

-- Propiedades: 
Tambien pueden llamarse atributos, seran sustantivos(palabras identifica las cosa que conocemos)
las propiedades puede ser el nombre, tamaño, forma, estado de un elemento de un objeto.
-- Comportamiento: 
Son todas las operaciones, acciones del objeto, suelen ser verbos o sustantivo y verbo.
login(), logout, makeReport().

-- Clase
Las clases me permitirán generar mas objetos. Son los modelos sobre los cuales construiremos objetos.
Abstraccion: Analizar objetos para crear clases. 
la abstraccion permite abstraer la forma del objeto para obtener un molde para despues
crear mas objetos, para despues agregarle las propiedades y comportamiento que quiera.


Cuando ya se tiene una clase un modelo lo suficiente generico que permita obtener mas
objetos lo siguiente es plasmarlo en un diagrama UML, ya que las clases son el molde 
el cual tiene atributos y las operaciones del objeto.

Identidad(colorVerde):Nombre de la clase su identificador, nombre debe ser unico.
Estado(colorVioleta):El estado de la clase cualquier atributo, propiedad, que defina la clase.
Comportamiento(colorAzul):Los comportamiento o acciones de la clase.

----------------------------
Nombre Clase (colorVerde)
----------------------------
Atributo1(colorVioleta)
Atributo2(colorVioleta)
Atributo3(colorVioleta)
AtributoN(colorVioleta)
----------------------------
Operacion 1(colorAzul)
Operacion 2(colorAzul)
Operacion 3(colorAzul)
Operacion N(colorAzul)
----------------------------

Ejemplo de clase:

-------------------
	Person
-------------------
	name
------------------
	walk()
------------------


*** Modularidad ***

Es la posibilidad de subdividir un sistema en varios elementos o componentes para formar 
el sistema por completo.
 
La modularidad viene del diseño modular, el diseño insdustrial arquitectura.

La POO se compone de la modularidad, y este permite: Reutilizar codigo, evitar colapsos,
mantenible(añadiendo o quitando), Legibilidad, Resolucion rapida de problemas.

clase: Modularidad, divide el programa en partes o modulos/clases, separar las clase en archivos.

-- Declarando un objeto:
Doctor  myDoctor;   //Doctor(tipo de objeto o nombre de la clase), myDoctor(Nombre del objeto)

-- Instanciando un objeto:
myDoctor = new Doctor(); //myDoctor(Nombre del objeto, new Doctor()(Creando el objeto.

-- Declarando e Instanciando un objeto:
Doctor  myDoctor = new Doctor();  //Doctor  myDoctor (declarando el objeto), = new Doctor();(instanciando/creando el objeto)

-- Utilizando el objeto (en el main)
Doctor  myDoctor = new Doctor();
myDoctor.name = "Alejandro Lopez";
myDoctor.showName();

Una clase no es un objeto -
-- Metodo Constructor -- 
  //Cuando queremos llamar a los metodos siempre se usa parentesis
 //new Doctor(); //El metodo constructor siempre va despues de la palabra reservada new,
y va a usar el nombre de la clase seguido de parentesis

myDoctor = new Doctor();

 ** Metodo constructor
- Crea nuevas instancias de una clase
- Tiene el mismo nombre que la clase que inicializa.
- Usa la palabra reservada new
Usa cero o mas argumentos contenidos dentro de los parentesis que siguen el nombre. 
No regresa un valor

-- Metodo Static
- Se puede usar en toda la clase
- Esta definido por la palabra reservada static.

Los metodos static pueden ser accesados indicando el nombre de la clase, la notacion
punto y el nombre del metodo. Se invoca en una clase que no tiene instancias de la clase.

public class Calculadora{
public static int suma(int a, int b){
return a+b;
}
calculadora.suma(5,2);

Mienbros static:

	public class Calculadora{
		public static final double PI = 3.1416;
		public static int valor = 0;
	}
	Calculadora.PI;
	Calculadora.valor;


Mienbros static:
import static com.anncode.operaciones.Calculadora.*  // -- importar la clase
import static java.lang.Math.*;

public class Principal{
	public static void main(String[] args){
		System.out.println(suma(3,5));  // Usar el metodo suma de la clase calculadora.
		System.out.println(PI);
	}
}

C11---------Encapsulamiento modificadores de acceso --------------------------

si = permite el acceso de modificar, no= no permite el acceso de modificar

 Modificador |  Clase | Package |  Subclase  | Otros |
 Public		 si        si         si        si
 Protected	 si	   si         si	no
 default	 si	   si  	      no	no
 private	 si	   no	      no	no	//un nivel de acceso al parametro dentro de la clase.
-------------------------------------------------------

C12

    // Metodos Getters (Obtener dato) y Setters(asignar o modificar dato):
    // Leer/Escribir especificamente los valores de las variables miembro.
    // Como ya las variables estan encapsuladas(private) no se pueden editar, por lo que
    //para ingresar o modificar será utilizando los metodos getters y setters.
    // Los getter y setter no ayudan a validar y mantener la consistencia en la logica del negocio en nuestros modelos o clases.

C13
		Variables ≠ Objetos
Variables son entidades elementales(muy sencillas).
*Un número
*Un caractér
*Un valor verdadero falso

Objetos son entidades complejas que pueden estar formadas por la agrupacion de muchas
variables y metodos.

Clases Wrapper/Objeto Primitivo
Byte, Short, Integer, Long, Float, Double, Character, Boolean, String.

C14
	Clases Anidadas
Una clase anidada es una clase dentro de otra clase.

class ClaseExterior {
	class ClaseAnidada {
	}
}


			 Clases Anidadas(2 tipos)
			  /		\
		    clase Internas	Clases estáticas anidadas
			/	\
Clases Locales a un método	Clases Internas anónimas




class ClaseExterior {
	static class ClaseStaticaAnidada {
	}
	class claseInterna{
	}
}

Clases estaticas: 
* No se necesitan crear instancias para llamarlas.
* Solo se pueden llamar a los métodos estáticos.

Clases anidadas
* Anidadas pueden llamar a cualquier tipo de elemento metodo.
- Clases helper 
- Agrupadas por lógica 
- Encapsulación


Ejemplo:

	public class Enclosing{
		private static int x = 1;

		public static class StaticNested{
			private void run(){
				//Implementacion
			}	
		}
	}

//implementacion de la clase estatica
	
	public class Main {
	public static void main(String[] args){
		Enclosing.StaticNested nested = Enclosing.StaticNested();
		nested.run();
	}	
	}



Clases Internas:
	
	public class Outer {
		public class Inner {
		}
	}

	public class Main {
		public static void main(String[] args){
			Outer outer = new Outer();  // instanciar para tener acceso
			Outer.Inner inner = outer new Inner();
		}
	}



	** Clases Locales a un Método

	public class Enclosing {
		void run(){
			class Local{
				void run(){
				}
		}

		Local local = new Local();
		local.run();
		}
	}


	public class Main{
		public static void main(String[] args){
			Enclosing enclosing = new Enclosing();
			enclosing.run();
		}
	}


C16 ¿Que es la herencia? Don´t repeat yourself

	DRY: Don´t repeat yourself
*Promueve la reduccion de duplicacion en programación.
*Las piezas de informacion nunca deben duplicarse.
*Incrementa la dificultad en los cambios y evolucion.
	

//Herencia: Crearemos nuevas clases a partir de otras.
En la herencia se establece una relacion padre e hijo.

   SuperClase  <--Clase abstracta - Clase de arriba(clase padre)
	|
    SubClase   <--Hereda de la superclase -  Clase de abajo(clase hijo)
	
En la herencia se crea una nueva abstraccion del analisis de 2 moldes
osea una nueva abstraccion de la abstraccion que se habia hecho anterior.


C17: Super y This

Herencia: Crear una abstraccion de la abstraccion.

//Super class 
	public class User{
	}
//Subclase
	public class Patient extends User{
	}


//Super y This
Super: Indica que una variable o un método es de la clase padre(superclase).
Super es decir que estoy utilizando herencia. Cuando haga super en la clase hija me
estaré refiriendo a la superclase.
this: Permite especificar que la variable que esta señalando(this.nombreVariable) es
de la misma clase en la que se usa.
Donde quiera que utilice this me voy a referir a la clase donde estoy ubicado.


C18 - Polimorfismo Sobreescritura de metodos
En  java no se permite hacer la herencia multiple, una clase hija no puede tener 2 papas.

Sobreescritura: Cuando una clase hereda de otra y en esta clase hija se redefine un 
método con una implementacion distinta a la de la clase padre.

Finally algo que es constante, no va a cambiar. Puede definirse un metodo o una clase.
Static para hacerlo global.

Sobreescritura de Constructores: Un constructor en una subclase usando los miembros heredados
de la superclase con argumentos diferentes.

//Sobreescritura de metodo puedo añadir otras funcionalidades o quitar funcionalidades del metodo padre
en el hijo.

//El metodo toString proviene de la clase object cuando creamos una clase o un objeto sera tipo object
y esa clase estará heredando automaticamente de la clase object.

C19 - Polimorfismo Sobreescribiendo el método toString.
Polimorfismo: Posibilidad de sobreescribir un método con comportamientos diferentes.

Poli=muchos
morfismo=formas
 Esto significa muchas formas a una sola cosa a un solo metodo se le da muchas formas.



C20 - Interfaces

Diagrama: 
https://lucid.app/lucidchart/a2c34ced-1f98-4823-8672-72d3625eb8c9/edit?invitationId=inv_8820f20a-e343-4e71-a0f5-314a1e68b9d5&page=0_0#


Lo que llevamos:


			User(clase padre)			
		-----------------------------------
			id: int					
			name: String				
			email: String				
			address: String				
			phoneNumber: String			
		------------------------------------
			getters
			Setters
		------------------------------------
		/(hereda)      \(hereda)		\(hereda)
	       /		\			 \
	Doctor(class hija)	Patient(class hija)		Nurse(class hija)
---------------------- 		--------------------    ---------------------------    
speciality : String		birthday : String		speciality : String
----------------------		weight	: String	---------------------------
getters				height  : String		getters
Setters				blood	: String		Setters
----------------------		------------------- 	---------------------------
	|			getters				   |
	|			Setters				   |
	|			-------------------		   |
	|				|	|		   |
	|				|	|		   |
	|				|	|		   |
	|				|	|		   |
	|_______________________________|	|		   |
			|			|		   |
			|			|__________________|
			|				   |
	________________|________________	___________|________		   
		AppointmentDoctor
(maneja citas entre el doc y el pacient)	AppointmentNurse(maneja cita entre Nurse y pacient)
		------------------------	------------------------
		id int				id int
		patient: Patient		patient: Patient
		doctor: Doctor			nurse: Nurse
		date: Date			date: Date
		time: String			time: String
		------------------------	------------------------
		getters				getters
		Setters				Setters
		------------------------	------------------------
				|		|
				|		|
				|		|
			-----------------------------
				ISchedulable(interfaz)
			-----------------------------

			------------------------------

			schedule(Date date, String time)
			--------------------------------


-- Las Interfaces:
Es un tipo de referencia similar a una clase que podria contener solo constantes 
y definiciones de metodos.

Se establece la forma de una clase(nombres de metodos, listas de argumentos
y tipos de retorno, pero no bloques de codigo).
Solo debe tener la redaccion de metodos.

El nombre de una interfaz debe estar vinculado a una actividad o a una accion.

Interfaces:

	public interface ISchedulable {
		schedule(Date date, String Time);
	}

//usar la interface se utiliza implements se utiliza con incial I(interface) la interfaz
	public class AppointmentDoctor implements ISchedulable{
	}

Una particularidad de las interfaces es que si se pueden implementar varias al mismo tiempo.


C21- Creando una interfaz para definir si una fecha es agendable

Interfaces: Detectar comportamientos que se pueden reutilizar en diferentes familias o 
diferentes clases es ahi donde podemos aprovechar el comportamiento de las interfaces para
abstraer esos comportamientos y aplicar el concepto de composicion, de estar componiendo 
nuestras clases tantas veces se necesiten.

C22 - Clases Abstractas

Polimorfismo:
Herencia Clases
Métodos sobreescritos
Muchas formas.

En las interfaces: 
- A veces no necesitamos implementar todos los métodos.

Herencia: 
- Las clases podrian no necesitar heredar la implementacion de un método.
- A veces no necesitamos crear instancias de una clase padre, ya que es muy genérica.

Las clases abstractas: Es una combinacion de interfaces y herencias.
 - Nos ayuda a solucionar los problemas que tienen las interfaces de que en las clases 
   donde se implementa una interfaz se tiene que implementar todos los metodos.
 - Y en la herencia puedo crear una instancia de la clase padre.

Clase abstracta:
- No implementa todos los métodos(podemos definir que metodos son obligatorios implementar y que no.
- No crearemos instancias(No es necesario crear instancias, no podemos crear objetos de esta clase).
  No podemos crear instancias de una clase abstracta.

	public abstract class Figura{   }

C23 - Miembros Abstractos

Las clases abstractas por defecto siempre serán clases padres y no se podrán crear objetos.
solamente podremos crear objeto de las clases hijos que heredan de su clase abstractas padre.

//Clase abstracta:

	public abstract class Figura{   
		abstract void dibujate(); //Metodos que tengan la palabra abstract son obligatorios implementar en la clase hijas.
		void dibujate(); //Metodos que no tengan la palabra abstract no son obligatorios implementar en la clase hijas, son opcionales.
	}


//Los metodos definidos con abstractas son obligatorios implementarlos en las clases hijas.
   












